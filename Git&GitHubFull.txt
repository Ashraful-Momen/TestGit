# For Web App's Virsion control we use git ... In linux we use snpashot for goto many stage after change in our sytem


>>> commit => after change code  we use commit (with command -whatever change) for save. 1 commit 1 stage will be created as snapshot ...

>>> checkpoint => after change code inside our apps we can go/back => previous/next virsion ... after commit create a new check point


-------------------------install the Git-----------------------

>>> download and install with default settings

------------------------initialize with folder---------------
>>> git init 
------------------------git status---------------------------

>>> git status [check all info about the git folder - status, commit, branch, stage...etc]

------------------------git add file/folder-----------------------

>>> git add fileName/FolderName
>>> git add . [all file/folder in current folder will be add in git add(tracked)]

*** after git add we can commit 

-----------------------git remove/untracked file/folder---------------------

>>> git rm --cached gitText.txt [file/folder Name]

------------------------git commit (create snapshot/stage)------------------------------------------
# for commit firt -> 
----------------------------
>>>git config --global user.email "you@example.com"
>>>git config --global user.name "Your Name"
----------------------------
============================================
#check the git config: 
----------------------
>>> git config --list
============================================
//single line commit=> 
-----------------------
>>> git commit -m 'first commit '  [-m means (msg)]

multi line commit  => 
-----------------------
>>> git commit 

----------------------git log : show the commit--------------------------------
>>> git log [see all commit ]

----------------------
see the commit in one line (shortly)
-----------------------
>>> git log --oneline
-----------------------
commit HEAD -> master( here commit Head is a pointer last position of commit)
-----------------------
*** before commit -m , must be use >>> git add . >>> then commit >>> git commit -m 
-----------------------

------------------------Git graph package install in VS CODE extension-------------------------
>>> clt+shift+p [show the git graph] 
>>> then search =>> git graph views + click 
>>> click on the commit | then we can able to see commit detials .... (usefull for bugs findings in app)
-------------------------------------------------------------------------------------------

---------------------------.gitignor : for untracked file/folder ------------------------------- 

inside .gitignore file write fileName.txt or folderName /     <- then those file or folder ignore for->  git add . 

>>> fileName.txt 
>>> folderName / 
--------------------------------
>>> https://www.toptal.com/developers/gitignore/
>>> in search box -> django / react / node / .... for ignore those file and small size <- provide all .gitignore files...
---------------------------------



---------------------------------------------------------------------------------------------------------


-------------------------------------git branch::--------------------------------------------------------------------

branch working as like tree ... from master branch (main ) to create sub branch ....
>>> some of programmer working  together with branch to develop different portions of Apps [1 person develop hompage, 1 person develop contact page , 1 person deveop differents apps etc]

show the branch:
-----------------
>>> git branch

1. first commit
2. second commit
3. third commit 

>>> second commit parent is first commit (hash_id)
>>> third commit parent is second commit (hash_id)

----------------------------------
***create branch=> 
-----------------------------------
>>> git checkout -b branchAnyName  | when create new branch , previous branch will be parent branch for new branch , and new branch inherit all propertys from parent branch... after merging
-------------------------------------
***show the all branch=> 
-------------------------
>>> git branch -a 

***show the more about branch
-------------------------------------
>>> git branch -v
-------------------------------------

-------------------------------------
***switch 1 branch to another branch ->
-------------------------------------
>>> git checkout branchName 
-------------------------------------
if we switch child (feature) branch to parent(master) branch then child(feature) previous task will remove ... 
again if we switch 
----------------------------------------------Git merge Main part: -----------------------------------------------------------
Before merge must be pull the latest code . then solve the conflict (accept incoming | accept current | accept both) either getting fast-forward error . 

question=> there are 2 branch in git 1. momen 2.momen-dev. all update code in momen branch now I want to update all momen to momen-dev . how can I do that ?


To update the momen-dev branch with all the updates from the momen branch, you can follow these steps:

    Switch to the momen-dev branch:

 

>>> git checkout momen-dev   | >>> git switch momen-dev

Merge the momen branch into momen-dev:

>>> git merge origin momen

This will incorporate all the changes from the momen branch into the momen-dev branch.

#after merge momen -> momen-dev all code then run the command 
>>> git push origin momen-dev | this command update all commit into momen-dev
---------------------------------------------------------------------------------------------------------
--------------------------------------------Visualizing Merge-------------------------------------------------------------
Fast-Forwading- Merging.=> [after master branch work , switch new featuer branch ... then complete task / commit , then switch master branch and marge with feature branch, ***in that time master branch has no more commit change . then we success fully to do merging]

>>> git branch (check the branch)
>>> git checkout master (switch)
>>> git merge feature(child branch name)

***delete branch >>> git branch -d branchName 
>>> git branch -d feature 


suppose we want develop App portions like login system in another branch . After complete the Login System we can add/merge/copy with main/master branch
. after merge with main/master branch the child branch  not effect on main/master branch ... it's call => Fast-Forwading- Merging.
after completing Login system (another Branch) , Just we merge with master/main branch , then we can delete the (Log in system develop branch -child branch)

-------------------------------------
Merging with commit => 
------------------------
master branch commit => 1 , 2, 3, 
then create new branch feature branch and comit => 1, 2 . after that we again switch master branch , then commit => 4,5, ... 
[but this master branch change of commit can't merge/add with feature branch -> that's why we can't merging feature branch with master branch ]

*** to solve this issue , use Merging with commit (last commit of master branch)=> then all commit will be add together (feature+master branch commit) as last commit.


------------------------------------
-------------------------------------
--------------------------------------------Delete Branch-------------------------------------------------------------
>>> git branch -d branchName 

---------------------------------------------------------------------------------------------------------
-------------------------------------------Resolve Merge Conflicts--------------------------------------------------------------
-------------------------------------
if can't merge / switch branch , then use those stratigy
1. git add . 
2. git commit -m "commit"
then swith branch and merge.... 

-------------------------------------
---------------------------------------------------------------------------------------------------------
--------------------------------------Creating Repo in Github -------------------------------------------------------------------
git offline file upload to git
---------------------------------------------------------------------------------------------------------
…or create a new repository on the command line
echo "# TestGit" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/Ashraful-Momen/TestGit.git
git push -u origin main
---------------------------------------
…or push an existing repository from the command line
git remote add origin https://github.com/Ashraful-Momen/TestGit.git    | [link off line folder to online folder]
git branch -M main   [change/migrate the branch name 'master' to 'main']
git push -u origin main [upload to file]


if want to push another branch => 
---------------------------------
>>> git push -u origin branch_name

-----------------------------------
download any file from github.com-> >>> git clone http:link...
-----------------------------------

-----------------------------------
---------------------------------------------------------------------------------------------------------
--------------------------------------git pull-------------------------------------------------------------------
if other person chagne code and commit in colleborate branch to get this update commit in our desktop git 
>>> git pull 
***online commit bring to offline git .....
------------------------------------------------------------------------------------------------------------------------
''' this commit create from gitHub''' for testing >>> git pull 
-------------------------------------------------------------------------------------------------------------
-------------------------------------git pull request(github)------------------------------------------------------------------------

basically pull reqeust merge with other branch in github ... and spach commit (more commit make 1 commit ...)
>>> if someone commit in github update branch with commit 
>>> then pull request merge one to other branch 
>>> for update github commit after pull reqeust(merge with other branch )
>>> git pull (update offline git )

-----------------------------------------git Forking-----------------------------------

┌───────────────────────┐         fork          ┌───────────────────────┐
│ Image-slider repo     │ ────────────────────► │ Image-slider repo     │
│ Roni(A) GitHub Profile│                       │shuvo(B) GitHub Profile│
└───────────────────────┘                       └───────────────────────┘
        ▲                                               │
        │                                               │ clone
        │                                     ┌─────────────────────────────┐
        │                                     │ Image-slider repo           │
        │                                     │ shuvo (B) local git repo    │
        │                                     └─────────────────────────────┘
        │                                               │
        │                                  make changes │
        │                                               ▼
        │                                     ┌──────────────────────┐
        │                                     │ Changes & Commit     │
        │                                     │ Local Git Repo       │
        │                                     └──────────────────────┘
        │                                               │
        │                                     push changes │
        │                                               │
        │                                               ▼
        ◄────────────────────── pull request ────────────┘

--------------- Forking Part 1 -------------------------------------------------------------------
1️⃣ Go to any GitHub profile (Example: Profile 'A').
2️⃣ Select a repository where you want to contribute.
3️⃣ Click the **Fork** button on that repository.

➡ This action copies the repository (Example: A/contribute_repo) into your GitHub account (Profile 'B').

4️⃣ Clone your forked repository (now under your GitHub profile) into your local machine:
$ git clone https://github.com/B/contribute_repo.git

5️⃣ Make your changes locally.
6️⃣ Commit the changes:
$ git add .
$ git commit -m "Your commit message"

7️⃣ Push the changes to your GitHub repository:
$ git push origin branch_name

--------------- Forking Part 2: Pull Request -------------------------------------------------------

1️⃣ Go to your GitHub Profile 'B'.
2️⃣ Open the forked repository.
3️⃣ Click on **Pull Request** (Request to merge your changes into original repo).

You’ll get these options:
-----------------------------------
Option 1: Select Original Repo (Profile 'A') where you want to contribute.  
Option 2: Select the branch of Profile 'A' (usually 'main' or 'master').  
Option 3: Select your forked repo (Profile 'B') where you made changes.  
Option 4: Select the branch of Profile 'B' where you committed the changes.
-----------------------------------

✅ Once submitted, GitHub Profile 'A' will review your Pull Request.

✅ If accepted (merged), your contribution will be included in the main project, and your profile ('B') will appear in the Contributors list.

------------------------------------My Previous Note for GitHub Forking------------------------------------------------------------
#git forking => clone a repository from other github profile into my github profile . 

# fork : clone other git_repo to my github account 
-----------
goto any 'A' git profile 
select any repo which I contribute my work (click fork)
when click fork 'A/contribute_repo' clone to my personal account . 
after modify the code then push my personal account . 
----------------------------------------------------

#Request for Contribution: 
---------------------------
#goto git personal profile 'B'. 
#goto to pull request . 

options => 
-------------
"""
option 1 : select_git_A_profile/repo/ [where I want to contribute ] | option 2: select 'A' branch | option 3: select my person 'B' profile [where I modify those code for contribute] | option 4:  and select 'B' banch where code. 
--------------------------------------------------
# Git profile A : accept the pull request (merge those code) then | B profile show in contribute list . 


-------------------------------- End Previous Forking Note --------------------------

------------------------------------------- Collaboration ---------------------------------------------------
Here is the **Git Collaboration Note (With Branch Protection Rule)** — fully explained in simple language and including the ASCII flow diagram.

---

# ✅ Git Collaboration Workflow (Branch Protection Enabled)

---

## ✅ Purpose:

This workflow ensures that **no one can push directly to the main/master branch**.
All changes must go through a **review process (Pull Request)** before merging.

---

## ✅ Collaboration Process:

```
1️⃣ The repository owner (Profile 'A') enables **branch protection** on the 'main' (or 'master') branch:

⚙️ Settings → Branches → Branch Protection Rules:
- Require pull request reviews before merging.
- Require status checks to pass before merging (optional).
- Disallow force pushes to the branch.
```

---

## ✅ Developer Workflow:

```
1️⃣ Developer (Profile 'B') clones the repository:
$ git clone https://github.com/A/project.git

2️⃣ Create a **new branch** for the feature/fix:
$ git checkout -b feature_branch

3️⃣ Work on changes:
$ git add .
$ git commit -m "Add new feature"

4️⃣ Push the branch to remote:
$ git push origin feature_branch
```

---

## ✅ Pull Request & Review:

```
1️⃣ Go to GitHub → Repository → Pull Requests → New Pull Request.

2️⃣ Select:
- Base Branch: 'main' (protected branch).
- Compare Branch: 'feature_branch' (your new branch).

3️⃣ Submit Pull Request.

4️⃣ Repository Owner (Profile 'A') reviews the Pull Request.

✅ If approved, Owner merges it into 'main'.
✅ Your changes now appear in the main branch.
```

---

## ✅ Key Rule:

🚫 **Direct Push to Main is Blocked!**
✅ All changes must go through **Pull Request & Review**.

---

## ✅ ASCII Flow Diagram:

```
┌───────────────────────┐
│   GitHub Repo (A)     │
│   main (protected)    │◄───┐  Merge after review
└───────────────────────┘    │
                             │
                             │ Pull Request (Code Review)
                             │
┌───────────────────────┐    │
│  Developer Git Clone  │────┘
│  (Local Repo, B)      │
└───────────────────────┘
         │
         │ Create New Branch
         ▼
┌───────────────────────┐
│ Feature Branch        │
│ Local Commits         │
└───────────────────────┘
         │
         │ Push to Remote Branch
         ▼
┌───────────────────────┐
│ GitHub Repo (A)       │
│ New Branch (B's code) │
└───────────────────────┘
```

---



-------------------------------------- End Git Collaboration ------------------------------------------------


#merge command : 
-----------------
>>> git checkout A/main  # or the branch where you want to merge
>>> git pull origin pull/<PR_number>/merge  # pull the PR changes
>>> git push origin A/main  # push the merged changes back to the repository

"""
------------------------------------------git Read.md(mark down)-------------------------------------
this is a github template ... write down about github repo in read.me... and there are some of rulse 
to write the details in readme.md ....
-------------------------------------------Error fixing for pushing --------------------------------
if can't push to github repo => git pull origin main --allow-unrelated-histories

------------------------------------------download with branch repo------------------------------
>>> git pull remote_repo Branch
------------------------------------------goto back commit 1 step--------------------------------
>>> git reset --hard HEAD~1
------------------------------------------git pull requst : (head)dev1 branch to (base)main branch-------------------------------
>>> gh pr create --base main --head dev1 --title "Title of your PR" --body "Description of your PR"
----------------------------------If remove all code momen branch and replace code from hello branch -----------------------------
>>> git switch momen // firstly have to switch the momen branch 
>>> git reset --hard hello  // this line remove all code from momen branch and replace all code from hello branch  

#after code replace run the command for update all commit for momen branch : 
>>> git push --set-upstream origin momen

------------------------------------------------show the git commit : pretty format-------------------------------------
>>> git log --pretty=format:"%h - %an, %ar : %s"

------------------------------------------------new folder pull the git project --------------------------------------
#main branch get auto but other branch have to fetch menually : 
>>> git fetch origin momen
#create and swith new branch : 
>>> git checkout -b momen origin/momen
-----------------------------------------------show the current branch-----------------------------------------
>>>git branch --show-current
--------------------------------------------**** suppose I do some task on momen branch , in that time other persone said to merge. Need to save current brach task with >>> git stash , then merge with other branch . 
and after merge pull code from git memory use >>> git stash pop. 
#copy current task to git memory : >>> git stash 
#paste 'git stash tash to branch again ' >>> git stash pop


-----------------------------------------------Change the git remote url-----------------------------------------
>>> git remote set-url origin http://119.148.19.197/ashraful/instasure-microsite-main.git
